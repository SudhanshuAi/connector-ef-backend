services:
  # The PostgreSQL database service that your Flask app depends on.
  # Note: The credentials are still 'airflow:airflow'. Your app's code likely expects this.
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - autonmis-network

  # Your Flask WebSocket application service.
  flask-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ../.env 
    ports:
      - "5002:5001"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy # Waits for postgres to be ready before starting.
    networks:
      - autonmis-network

# Defines the volume for persisting PostgreSQL data.
volumes:
  postgres-db-volume:

# Defines the shared network for the services to communicate.
networks:
  autonmis-network:
    name: autonmis-network